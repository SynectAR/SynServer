// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vnarpc.proto
#ifndef GRPC_vnarpc_2eproto__INCLUDED
#define GRPC_vnarpc_2eproto__INCLUDED

#include "vnarpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace vnarpc {

class VnaRpc final {
 public:
  static constexpr char const* service_full_name() {
    return "vnarpc.VnaRpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::vnarpc::PortCount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortCount>> AsyncgetPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortCount>>(AsyncgetPortCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortCount>> PrepareAsyncgetPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortCount>>(PrepareAsyncgetPortCountRaw(context, request, cq));
    }
    virtual ::grpc::Status getPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::vnarpc::PortStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortStatus>> AsyncgetPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortStatus>>(AsyncgetPortStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortStatus>> PrepareAsyncgetPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortStatus>>(PrepareAsyncgetPortStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status measurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::vnarpc::EmptyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>> AsyncmeasurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>>(AsyncmeasurePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>> PrepareAsyncmeasurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>>(PrepareAsyncmeasurePortRaw(context, request, cq));
    }
    virtual ::grpc::Status measureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::vnarpc::EmptyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>> AsyncmeasureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>>(AsyncmeasureThruRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>> PrepareAsyncmeasureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>>(PrepareAsyncmeasureThruRaw(context, request, cq));
    }
    virtual ::grpc::Status apply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::vnarpc::EmptyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>> Asyncapply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>>(AsyncapplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>> PrepareAsyncapply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>>(PrepareAsyncapplyRaw(context, request, cq));
    }
    virtual ::grpc::Status reset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::vnarpc::EmptyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>> Asyncreset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>>(AsyncresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>> PrepareAsyncreset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>>(PrepareAsyncresetRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void getPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::PortCount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::PortCount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port* request, ::vnarpc::PortStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port* request, ::vnarpc::PortStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void measurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams* request, ::vnarpc::EmptyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void measurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams* request, ::vnarpc::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void measureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair* request, ::vnarpc::EmptyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void measureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair* request, ::vnarpc::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void apply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void apply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void reset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void reset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortCount>* AsyncgetPortCountRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortCount>* PrepareAsyncgetPortCountRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortStatus>* AsyncgetPortStatusRaw(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::PortStatus>* PrepareAsyncgetPortStatusRaw(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>* AsyncmeasurePortRaw(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>* PrepareAsyncmeasurePortRaw(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>* AsyncmeasureThruRaw(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>* PrepareAsyncmeasureThruRaw(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>* AsyncapplyRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>* PrepareAsyncapplyRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>* AsyncresetRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vnarpc::EmptyMessage>* PrepareAsyncresetRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::vnarpc::PortCount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::PortCount>> AsyncgetPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::PortCount>>(AsyncgetPortCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::PortCount>> PrepareAsyncgetPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::PortCount>>(PrepareAsyncgetPortCountRaw(context, request, cq));
    }
    ::grpc::Status getPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::vnarpc::PortStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::PortStatus>> AsyncgetPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::PortStatus>>(AsyncgetPortStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::PortStatus>> PrepareAsyncgetPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::PortStatus>>(PrepareAsyncgetPortStatusRaw(context, request, cq));
    }
    ::grpc::Status measurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::vnarpc::EmptyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>> AsyncmeasurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>>(AsyncmeasurePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>> PrepareAsyncmeasurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>>(PrepareAsyncmeasurePortRaw(context, request, cq));
    }
    ::grpc::Status measureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::vnarpc::EmptyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>> AsyncmeasureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>>(AsyncmeasureThruRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>> PrepareAsyncmeasureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>>(PrepareAsyncmeasureThruRaw(context, request, cq));
    }
    ::grpc::Status apply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::vnarpc::EmptyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>> Asyncapply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>>(AsyncapplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>> PrepareAsyncapply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>>(PrepareAsyncapplyRaw(context, request, cq));
    }
    ::grpc::Status reset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::vnarpc::EmptyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>> Asyncreset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>>(AsyncresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>> PrepareAsyncreset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>>(PrepareAsyncresetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::PortCount* response, std::function<void(::grpc::Status)>) override;
      void getPortCount(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::PortCount* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port* request, ::vnarpc::PortStatus* response, std::function<void(::grpc::Status)>) override;
      void getPortStatus(::grpc::ClientContext* context, const ::vnarpc::Port* request, ::vnarpc::PortStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void measurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams* request, ::vnarpc::EmptyMessage* response, std::function<void(::grpc::Status)>) override;
      void measurePort(::grpc::ClientContext* context, const ::vnarpc::MeasureParams* request, ::vnarpc::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void measureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair* request, ::vnarpc::EmptyMessage* response, std::function<void(::grpc::Status)>) override;
      void measureThru(::grpc::ClientContext* context, const ::vnarpc::PortsPair* request, ::vnarpc::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void apply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response, std::function<void(::grpc::Status)>) override;
      void apply(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void reset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response, std::function<void(::grpc::Status)>) override;
      void reset(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vnarpc::PortCount>* AsyncgetPortCountRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::PortCount>* PrepareAsyncgetPortCountRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::PortStatus>* AsyncgetPortStatusRaw(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::PortStatus>* PrepareAsyncgetPortStatusRaw(::grpc::ClientContext* context, const ::vnarpc::Port& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>* AsyncmeasurePortRaw(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>* PrepareAsyncmeasurePortRaw(::grpc::ClientContext* context, const ::vnarpc::MeasureParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>* AsyncmeasureThruRaw(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>* PrepareAsyncmeasureThruRaw(::grpc::ClientContext* context, const ::vnarpc::PortsPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>* AsyncapplyRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>* PrepareAsyncapplyRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>* AsyncresetRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vnarpc::EmptyMessage>* PrepareAsyncresetRaw(::grpc::ClientContext* context, const ::vnarpc::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getPortCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getPortStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_measurePort_;
    const ::grpc::internal::RpcMethod rpcmethod_measureThru_;
    const ::grpc::internal::RpcMethod rpcmethod_apply_;
    const ::grpc::internal::RpcMethod rpcmethod_reset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getPortCount(::grpc::ServerContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::PortCount* response);
    virtual ::grpc::Status getPortStatus(::grpc::ServerContext* context, const ::vnarpc::Port* request, ::vnarpc::PortStatus* response);
    virtual ::grpc::Status measurePort(::grpc::ServerContext* context, const ::vnarpc::MeasureParams* request, ::vnarpc::EmptyMessage* response);
    virtual ::grpc::Status measureThru(::grpc::ServerContext* context, const ::vnarpc::PortsPair* request, ::vnarpc::EmptyMessage* response);
    virtual ::grpc::Status apply(::grpc::ServerContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response);
    virtual ::grpc::Status reset(::grpc::ServerContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getPortCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPortCount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getPortCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortCount(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::PortCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPortCount(::grpc::ServerContext* context, ::vnarpc::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::vnarpc::PortCount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPortStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPortStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getPortStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortStatus(::grpc::ServerContext* /*context*/, const ::vnarpc::Port* /*request*/, ::vnarpc::PortStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPortStatus(::grpc::ServerContext* context, ::vnarpc::Port* request, ::grpc::ServerAsyncResponseWriter< ::vnarpc::PortStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_measurePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_measurePort() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_measurePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measurePort(::grpc::ServerContext* /*context*/, const ::vnarpc::MeasureParams* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmeasurePort(::grpc::ServerContext* context, ::vnarpc::MeasureParams* request, ::grpc::ServerAsyncResponseWriter< ::vnarpc::EmptyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_measureThru : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_measureThru() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_measureThru() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measureThru(::grpc::ServerContext* /*context*/, const ::vnarpc::PortsPair* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmeasureThru(::grpc::ServerContext* context, ::vnarpc::PortsPair* request, ::grpc::ServerAsyncResponseWriter< ::vnarpc::EmptyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_apply() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status apply(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestapply(::grpc::ServerContext* context, ::vnarpc::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::vnarpc::EmptyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_reset() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreset(::grpc::ServerContext* context, ::vnarpc::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::vnarpc::EmptyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getPortCount<WithAsyncMethod_getPortStatus<WithAsyncMethod_measurePort<WithAsyncMethod_measureThru<WithAsyncMethod_apply<WithAsyncMethod_reset<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getPortCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPortCount() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::vnarpc::EmptyMessage, ::vnarpc::PortCount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::PortCount* response) { return this->getPortCount(context, request, response); }));}
    void SetMessageAllocatorFor_getPortCount(
        ::grpc::MessageAllocator< ::vnarpc::EmptyMessage, ::vnarpc::PortCount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vnarpc::EmptyMessage, ::vnarpc::PortCount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPortCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortCount(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::PortCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPortCount(
      ::grpc::CallbackServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::PortCount* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPortStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPortStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::vnarpc::Port, ::vnarpc::PortStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vnarpc::Port* request, ::vnarpc::PortStatus* response) { return this->getPortStatus(context, request, response); }));}
    void SetMessageAllocatorFor_getPortStatus(
        ::grpc::MessageAllocator< ::vnarpc::Port, ::vnarpc::PortStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vnarpc::Port, ::vnarpc::PortStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPortStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortStatus(::grpc::ServerContext* /*context*/, const ::vnarpc::Port* /*request*/, ::vnarpc::PortStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPortStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::vnarpc::Port* /*request*/, ::vnarpc::PortStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_measurePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_measurePort() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::vnarpc::MeasureParams, ::vnarpc::EmptyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vnarpc::MeasureParams* request, ::vnarpc::EmptyMessage* response) { return this->measurePort(context, request, response); }));}
    void SetMessageAllocatorFor_measurePort(
        ::grpc::MessageAllocator< ::vnarpc::MeasureParams, ::vnarpc::EmptyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vnarpc::MeasureParams, ::vnarpc::EmptyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_measurePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measurePort(::grpc::ServerContext* /*context*/, const ::vnarpc::MeasureParams* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* measurePort(
      ::grpc::CallbackServerContext* /*context*/, const ::vnarpc::MeasureParams* /*request*/, ::vnarpc::EmptyMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_measureThru : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_measureThru() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::vnarpc::PortsPair, ::vnarpc::EmptyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vnarpc::PortsPair* request, ::vnarpc::EmptyMessage* response) { return this->measureThru(context, request, response); }));}
    void SetMessageAllocatorFor_measureThru(
        ::grpc::MessageAllocator< ::vnarpc::PortsPair, ::vnarpc::EmptyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vnarpc::PortsPair, ::vnarpc::EmptyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_measureThru() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measureThru(::grpc::ServerContext* /*context*/, const ::vnarpc::PortsPair* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* measureThru(
      ::grpc::CallbackServerContext* /*context*/, const ::vnarpc::PortsPair* /*request*/, ::vnarpc::EmptyMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_apply() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response) { return this->apply(context, request, response); }));}
    void SetMessageAllocatorFor_apply(
        ::grpc::MessageAllocator< ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status apply(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* apply(
      ::grpc::CallbackServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_reset() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vnarpc::EmptyMessage* request, ::vnarpc::EmptyMessage* response) { return this->reset(context, request, response); }));}
    void SetMessageAllocatorFor_reset(
        ::grpc::MessageAllocator< ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* reset(
      ::grpc::CallbackServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getPortCount<WithCallbackMethod_getPortStatus<WithCallbackMethod_measurePort<WithCallbackMethod_measureThru<WithCallbackMethod_apply<WithCallbackMethod_reset<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getPortCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPortCount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getPortCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortCount(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::PortCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPortStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPortStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getPortStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortStatus(::grpc::ServerContext* /*context*/, const ::vnarpc::Port* /*request*/, ::vnarpc::PortStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_measurePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_measurePort() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_measurePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measurePort(::grpc::ServerContext* /*context*/, const ::vnarpc::MeasureParams* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_measureThru : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_measureThru() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_measureThru() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measureThru(::grpc::ServerContext* /*context*/, const ::vnarpc::PortsPair* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_apply() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status apply(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_reset() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPortCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPortCount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getPortCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortCount(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::PortCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPortCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPortStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPortStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getPortStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortStatus(::grpc::ServerContext* /*context*/, const ::vnarpc::Port* /*request*/, ::vnarpc::PortStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPortStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_measurePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_measurePort() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_measurePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measurePort(::grpc::ServerContext* /*context*/, const ::vnarpc::MeasureParams* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmeasurePort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_measureThru : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_measureThru() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_measureThru() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measureThru(::grpc::ServerContext* /*context*/, const ::vnarpc::PortsPair* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmeasureThru(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_apply() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status apply(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestapply(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_reset() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPortCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPortCount() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPortCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPortCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortCount(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::PortCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPortCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPortStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPortStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPortStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPortStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortStatus(::grpc::ServerContext* /*context*/, const ::vnarpc::Port* /*request*/, ::vnarpc::PortStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPortStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_measurePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_measurePort() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->measurePort(context, request, response); }));
    }
    ~WithRawCallbackMethod_measurePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measurePort(::grpc::ServerContext* /*context*/, const ::vnarpc::MeasureParams* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* measurePort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_measureThru : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_measureThru() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->measureThru(context, request, response); }));
    }
    ~WithRawCallbackMethod_measureThru() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status measureThru(::grpc::ServerContext* /*context*/, const ::vnarpc::PortsPair* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* measureThru(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_apply() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->apply(context, request, response); }));
    }
    ~WithRawCallbackMethod_apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status apply(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* apply(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_reset() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->reset(context, request, response); }));
    }
    ~WithRawCallbackMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPortCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPortCount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vnarpc::EmptyMessage, ::vnarpc::PortCount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vnarpc::EmptyMessage, ::vnarpc::PortCount>* streamer) {
                       return this->StreamedgetPortCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPortCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPortCount(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::PortCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPortCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vnarpc::EmptyMessage,::vnarpc::PortCount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPortStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPortStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vnarpc::Port, ::vnarpc::PortStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vnarpc::Port, ::vnarpc::PortStatus>* streamer) {
                       return this->StreamedgetPortStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPortStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPortStatus(::grpc::ServerContext* /*context*/, const ::vnarpc::Port* /*request*/, ::vnarpc::PortStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPortStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vnarpc::Port,::vnarpc::PortStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_measurePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_measurePort() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vnarpc::MeasureParams, ::vnarpc::EmptyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vnarpc::MeasureParams, ::vnarpc::EmptyMessage>* streamer) {
                       return this->StreamedmeasurePort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_measurePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status measurePort(::grpc::ServerContext* /*context*/, const ::vnarpc::MeasureParams* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmeasurePort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vnarpc::MeasureParams,::vnarpc::EmptyMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_measureThru : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_measureThru() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vnarpc::PortsPair, ::vnarpc::EmptyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vnarpc::PortsPair, ::vnarpc::EmptyMessage>* streamer) {
                       return this->StreamedmeasureThru(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_measureThru() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status measureThru(::grpc::ServerContext* /*context*/, const ::vnarpc::PortsPair* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmeasureThru(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vnarpc::PortsPair,::vnarpc::EmptyMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_apply() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>* streamer) {
                       return this->Streamedapply(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status apply(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedapply(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vnarpc::EmptyMessage,::vnarpc::EmptyMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_reset() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vnarpc::EmptyMessage, ::vnarpc::EmptyMessage>* streamer) {
                       return this->Streamedreset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status reset(::grpc::ServerContext* /*context*/, const ::vnarpc::EmptyMessage* /*request*/, ::vnarpc::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vnarpc::EmptyMessage,::vnarpc::EmptyMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getPortCount<WithStreamedUnaryMethod_getPortStatus<WithStreamedUnaryMethod_measurePort<WithStreamedUnaryMethod_measureThru<WithStreamedUnaryMethod_apply<WithStreamedUnaryMethod_reset<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getPortCount<WithStreamedUnaryMethod_getPortStatus<WithStreamedUnaryMethod_measurePort<WithStreamedUnaryMethod_measureThru<WithStreamedUnaryMethod_apply<WithStreamedUnaryMethod_reset<Service > > > > > > StreamedService;
};

}  // namespace vnarpc


#endif  // GRPC_vnarpc_2eproto__INCLUDED
