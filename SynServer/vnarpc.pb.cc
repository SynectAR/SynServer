// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vnarpc.proto

#include "vnarpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vnarpc {
constexpr EmptyMessage::EmptyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EmptyMessageDefaultTypeInternal {
  constexpr EmptyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyMessageDefaultTypeInternal() {}
  union {
    EmptyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyMessageDefaultTypeInternal _EmptyMessage_default_instance_;
constexpr Port::Port(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_(0){}
struct PortDefaultTypeInternal {
  constexpr PortDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortDefaultTypeInternal() {}
  union {
    Port _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortDefaultTypeInternal _Port_default_instance_;
constexpr MeasureParams::MeasureParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0)
  , gender_(false){}
struct MeasureParamsDefaultTypeInternal {
  constexpr MeasureParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeasureParamsDefaultTypeInternal() {}
  union {
    MeasureParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeasureParamsDefaultTypeInternal _MeasureParams_default_instance_;
constexpr PortStatus::PortStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : open_(false)
  , short__(false)
  , load_(false)
  , gender_(false){}
struct PortStatusDefaultTypeInternal {
  constexpr PortStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortStatusDefaultTypeInternal() {}
  union {
    PortStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortStatusDefaultTypeInternal _PortStatus_default_instance_;
constexpr PortsPair::PortsPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : firstport_(0)
  , secondport_(0){}
struct PortsPairDefaultTypeInternal {
  constexpr PortsPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortsPairDefaultTypeInternal() {}
  union {
    PortsPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortsPairDefaultTypeInternal _PortsPair_default_instance_;
constexpr PortCount::PortCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : portcount_(0){}
struct PortCountDefaultTypeInternal {
  constexpr PortCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortCountDefaultTypeInternal() {}
  union {
    PortCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortCountDefaultTypeInternal _PortCount_default_instance_;
}  // namespace vnarpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vnarpc_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vnarpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vnarpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vnarpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vnarpc::EmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vnarpc::Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vnarpc::Port, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vnarpc::MeasureParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vnarpc::MeasureParams, port_),
  PROTOBUF_FIELD_OFFSET(::vnarpc::MeasureParams, type_),
  PROTOBUF_FIELD_OFFSET(::vnarpc::MeasureParams, gender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortStatus, open_),
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortStatus, short__),
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortStatus, load_),
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortStatus, gender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortsPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortsPair, firstport_),
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortsPair, secondport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vnarpc::PortCount, portcount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vnarpc::EmptyMessage)},
  { 5, -1, sizeof(::vnarpc::Port)},
  { 11, -1, sizeof(::vnarpc::MeasureParams)},
  { 19, -1, sizeof(::vnarpc::PortStatus)},
  { 28, -1, sizeof(::vnarpc::PortsPair)},
  { 35, -1, sizeof(::vnarpc::PortCount)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vnarpc::_EmptyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vnarpc::_Port_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vnarpc::_MeasureParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vnarpc::_PortStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vnarpc::_PortsPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vnarpc::_PortCount_default_instance_),
};

const char descriptor_table_protodef_vnarpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014vnarpc.proto\022\006vnarpc\"\016\n\014EmptyMessage\"\024"
  "\n\004Port\022\014\n\004port\030\001 \001(\005\";\n\rMeasureParams\022\014\n"
  "\004port\030\001 \001(\005\022\014\n\004type\030\002 \001(\t\022\016\n\006gender\030\003 \001("
  "\010\"G\n\nPortStatus\022\014\n\004open\030\001 \001(\010\022\r\n\005short\030\002"
  " \001(\010\022\014\n\004load\030\003 \001(\010\022\016\n\006gender\030\004 \001(\010\"2\n\tPo"
  "rtsPair\022\021\n\tfirstport\030\001 \001(\005\022\022\n\nsecondport"
  "\030\002 \001(\005\"\036\n\tPortCount\022\021\n\tportcount\030\003 \001(\0052\336"
  "\002\n\006VnaRpc\0229\n\014getPortCount\022\024.vnarpc.Empty"
  "Message\032\021.vnarpc.PortCount\"\000\0223\n\rgetPortS"
  "tatus\022\014.vnarpc.Port\032\022.vnarpc.PortStatus\""
  "\000\022<\n\013measurePort\022\025.vnarpc.MeasureParams\032"
  "\024.vnarpc.EmptyMessage\"\000\0228\n\013measureThru\022\021"
  ".vnarpc.PortsPair\032\024.vnarpc.EmptyMessage\""
  "\000\0225\n\005apply\022\024.vnarpc.EmptyMessage\032\024.vnarp"
  "c.EmptyMessage\"\000\0225\n\005reset\022\024.vnarpc.Empty"
  "Message\032\024.vnarpc.EmptyMessage\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vnarpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vnarpc_2eproto = {
  false, false, 639, descriptor_table_protodef_vnarpc_2eproto, "vnarpc.proto", 
  &descriptor_table_vnarpc_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_vnarpc_2eproto::offsets,
  file_level_metadata_vnarpc_2eproto, file_level_enum_descriptors_vnarpc_2eproto, file_level_service_descriptors_vnarpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_vnarpc_2eproto_getter() {
  return &descriptor_table_vnarpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vnarpc_2eproto(&descriptor_table_vnarpc_2eproto);
namespace vnarpc {

// ===================================================================

class EmptyMessage::_Internal {
 public:
};

EmptyMessage::EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vnarpc.EmptyMessage)
}
EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vnarpc.EmptyMessage)
}

inline void EmptyMessage::SharedCtor() {
}

EmptyMessage::~EmptyMessage() {
  // @@protoc_insertion_point(destructor:vnarpc.EmptyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EmptyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EmptyMessage::ArenaDtor(void* object) {
  EmptyMessage* _this = reinterpret_cast< EmptyMessage* >(object);
  (void)_this;
}
void EmptyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vnarpc.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vnarpc.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vnarpc.EmptyMessage)
  return target;
}

size_t EmptyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vnarpc.EmptyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmptyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyMessage::GetClassData() const { return &_class_data_; }

void EmptyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EmptyMessage *>(to)->MergeFrom(
      static_cast<const EmptyMessage &>(from));
}


void EmptyMessage::MergeFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vnarpc.EmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vnarpc.EmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {
  return true;
}

void EmptyMessage::InternalSwap(EmptyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vnarpc_2eproto_getter, &descriptor_table_vnarpc_2eproto_once,
      file_level_metadata_vnarpc_2eproto[0]);
}

// ===================================================================

class Port::_Internal {
 public:
};

Port::Port(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vnarpc.Port)
}
Port::Port(const Port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:vnarpc.Port)
}

inline void Port::SharedCtor() {
port_ = 0;
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:vnarpc.Port)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Port::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Port::ArenaDtor(void* object) {
  Port* _this = reinterpret_cast< Port* >(object);
  (void)_this;
}
void Port::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Port::Clear() {
// @@protoc_insertion_point(message_clear_start:vnarpc.Port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vnarpc.Port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vnarpc.Port)
  return target;
}

size_t Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vnarpc.Port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Port::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Port::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Port::GetClassData() const { return &_class_data_; }

void Port::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Port *>(to)->MergeFrom(
      static_cast<const Port &>(from));
}


void Port::MergeFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vnarpc.Port)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Port::CopyFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vnarpc.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  return true;
}

void Port::InternalSwap(Port* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Port::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vnarpc_2eproto_getter, &descriptor_table_vnarpc_2eproto_once,
      file_level_metadata_vnarpc_2eproto[1]);
}

// ===================================================================

class MeasureParams::_Internal {
 public:
};

MeasureParams::MeasureParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vnarpc.MeasureParams)
}
MeasureParams::MeasureParams(const MeasureParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&gender_) -
    reinterpret_cast<char*>(&port_)) + sizeof(gender_));
  // @@protoc_insertion_point(copy_constructor:vnarpc.MeasureParams)
}

inline void MeasureParams::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gender_) -
    reinterpret_cast<char*>(&port_)) + sizeof(gender_));
}

MeasureParams::~MeasureParams() {
  // @@protoc_insertion_point(destructor:vnarpc.MeasureParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MeasureParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeasureParams::ArenaDtor(void* object) {
  MeasureParams* _this = reinterpret_cast< MeasureParams* >(object);
  (void)_this;
}
void MeasureParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeasureParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeasureParams::Clear() {
// @@protoc_insertion_point(message_clear_start:vnarpc.MeasureParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gender_) -
      reinterpret_cast<char*>(&port_)) + sizeof(gender_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasureParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vnarpc.MeasureParams.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeasureParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vnarpc.MeasureParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vnarpc.MeasureParams.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // bool gender = 3;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_gender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vnarpc.MeasureParams)
  return target;
}

size_t MeasureParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vnarpc.MeasureParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // bool gender = 3;
  if (this->_internal_gender() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasureParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MeasureParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasureParams::GetClassData() const { return &_class_data_; }

void MeasureParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MeasureParams *>(to)->MergeFrom(
      static_cast<const MeasureParams &>(from));
}


void MeasureParams::MergeFrom(const MeasureParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vnarpc.MeasureParams)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasureParams::CopyFrom(const MeasureParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vnarpc.MeasureParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureParams::IsInitialized() const {
  return true;
}

void MeasureParams::InternalSwap(MeasureParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeasureParams, gender_)
      + sizeof(MeasureParams::gender_)
      - PROTOBUF_FIELD_OFFSET(MeasureParams, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasureParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vnarpc_2eproto_getter, &descriptor_table_vnarpc_2eproto_once,
      file_level_metadata_vnarpc_2eproto[2]);
}

// ===================================================================

class PortStatus::_Internal {
 public:
};

PortStatus::PortStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vnarpc.PortStatus)
}
PortStatus::PortStatus(const PortStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&gender_) -
    reinterpret_cast<char*>(&open_)) + sizeof(gender_));
  // @@protoc_insertion_point(copy_constructor:vnarpc.PortStatus)
}

inline void PortStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&open_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gender_) -
    reinterpret_cast<char*>(&open_)) + sizeof(gender_));
}

PortStatus::~PortStatus() {
  // @@protoc_insertion_point(destructor:vnarpc.PortStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortStatus::ArenaDtor(void* object) {
  PortStatus* _this = reinterpret_cast< PortStatus* >(object);
  (void)_this;
}
void PortStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:vnarpc.PortStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gender_) -
      reinterpret_cast<char*>(&open_)) + sizeof(gender_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool short = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          short__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          load_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vnarpc.PortStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->_internal_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  // bool short = 2;
  if (this->_internal_short_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_short_(), target);
  }

  // bool load = 3;
  if (this->_internal_load() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_load(), target);
  }

  // bool gender = 4;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_gender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vnarpc.PortStatus)
  return target;
}

size_t PortStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vnarpc.PortStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool open = 1;
  if (this->_internal_open() != 0) {
    total_size += 1 + 1;
  }

  // bool short = 2;
  if (this->_internal_short_() != 0) {
    total_size += 1 + 1;
  }

  // bool load = 3;
  if (this->_internal_load() != 0) {
    total_size += 1 + 1;
  }

  // bool gender = 4;
  if (this->_internal_gender() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortStatus::GetClassData() const { return &_class_data_; }

void PortStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PortStatus *>(to)->MergeFrom(
      static_cast<const PortStatus &>(from));
}


void PortStatus::MergeFrom(const PortStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vnarpc.PortStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from._internal_short_() != 0) {
    _internal_set_short_(from._internal_short_());
  }
  if (from._internal_load() != 0) {
    _internal_set_load(from._internal_load());
  }
  if (from._internal_gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortStatus::CopyFrom(const PortStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vnarpc.PortStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortStatus::IsInitialized() const {
  return true;
}

void PortStatus::InternalSwap(PortStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortStatus, gender_)
      + sizeof(PortStatus::gender_)
      - PROTOBUF_FIELD_OFFSET(PortStatus, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vnarpc_2eproto_getter, &descriptor_table_vnarpc_2eproto_once,
      file_level_metadata_vnarpc_2eproto[3]);
}

// ===================================================================

class PortsPair::_Internal {
 public:
};

PortsPair::PortsPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vnarpc.PortsPair)
}
PortsPair::PortsPair(const PortsPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&firstport_, &from.firstport_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondport_) -
    reinterpret_cast<char*>(&firstport_)) + sizeof(secondport_));
  // @@protoc_insertion_point(copy_constructor:vnarpc.PortsPair)
}

inline void PortsPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&firstport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&secondport_) -
    reinterpret_cast<char*>(&firstport_)) + sizeof(secondport_));
}

PortsPair::~PortsPair() {
  // @@protoc_insertion_point(destructor:vnarpc.PortsPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortsPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortsPair::ArenaDtor(void* object) {
  PortsPair* _this = reinterpret_cast< PortsPair* >(object);
  (void)_this;
}
void PortsPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortsPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortsPair::Clear() {
// @@protoc_insertion_point(message_clear_start:vnarpc.PortsPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&firstport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondport_) -
      reinterpret_cast<char*>(&firstport_)) + sizeof(secondport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortsPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 firstport = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          firstport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 secondport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          secondport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortsPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vnarpc.PortsPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 firstport = 1;
  if (this->_internal_firstport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_firstport(), target);
  }

  // int32 secondport = 2;
  if (this->_internal_secondport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_secondport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vnarpc.PortsPair)
  return target;
}

size_t PortsPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vnarpc.PortsPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 firstport = 1;
  if (this->_internal_firstport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_firstport());
  }

  // int32 secondport = 2;
  if (this->_internal_secondport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_secondport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortsPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortsPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortsPair::GetClassData() const { return &_class_data_; }

void PortsPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PortsPair *>(to)->MergeFrom(
      static_cast<const PortsPair &>(from));
}


void PortsPair::MergeFrom(const PortsPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vnarpc.PortsPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_firstport() != 0) {
    _internal_set_firstport(from._internal_firstport());
  }
  if (from._internal_secondport() != 0) {
    _internal_set_secondport(from._internal_secondport());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortsPair::CopyFrom(const PortsPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vnarpc.PortsPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortsPair::IsInitialized() const {
  return true;
}

void PortsPair::InternalSwap(PortsPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortsPair, secondport_)
      + sizeof(PortsPair::secondport_)
      - PROTOBUF_FIELD_OFFSET(PortsPair, firstport_)>(
          reinterpret_cast<char*>(&firstport_),
          reinterpret_cast<char*>(&other->firstport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortsPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vnarpc_2eproto_getter, &descriptor_table_vnarpc_2eproto_once,
      file_level_metadata_vnarpc_2eproto[4]);
}

// ===================================================================

class PortCount::_Internal {
 public:
};

PortCount::PortCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vnarpc.PortCount)
}
PortCount::PortCount(const PortCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  portcount_ = from.portcount_;
  // @@protoc_insertion_point(copy_constructor:vnarpc.PortCount)
}

inline void PortCount::SharedCtor() {
portcount_ = 0;
}

PortCount::~PortCount() {
  // @@protoc_insertion_point(destructor:vnarpc.PortCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortCount::ArenaDtor(void* object) {
  PortCount* _this = reinterpret_cast< PortCount* >(object);
  (void)_this;
}
void PortCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortCount::Clear() {
// @@protoc_insertion_point(message_clear_start:vnarpc.PortCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  portcount_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 portcount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          portcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vnarpc.PortCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 portcount = 3;
  if (this->_internal_portcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_portcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vnarpc.PortCount)
  return target;
}

size_t PortCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vnarpc.PortCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 portcount = 3;
  if (this->_internal_portcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_portcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortCount::GetClassData() const { return &_class_data_; }

void PortCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PortCount *>(to)->MergeFrom(
      static_cast<const PortCount &>(from));
}


void PortCount::MergeFrom(const PortCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vnarpc.PortCount)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_portcount() != 0) {
    _internal_set_portcount(from._internal_portcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortCount::CopyFrom(const PortCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vnarpc.PortCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortCount::IsInitialized() const {
  return true;
}

void PortCount::InternalSwap(PortCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(portcount_, other->portcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vnarpc_2eproto_getter, &descriptor_table_vnarpc_2eproto_once,
      file_level_metadata_vnarpc_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vnarpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vnarpc::EmptyMessage* Arena::CreateMaybeMessage< ::vnarpc::EmptyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vnarpc::EmptyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vnarpc::Port* Arena::CreateMaybeMessage< ::vnarpc::Port >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vnarpc::Port >(arena);
}
template<> PROTOBUF_NOINLINE ::vnarpc::MeasureParams* Arena::CreateMaybeMessage< ::vnarpc::MeasureParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vnarpc::MeasureParams >(arena);
}
template<> PROTOBUF_NOINLINE ::vnarpc::PortStatus* Arena::CreateMaybeMessage< ::vnarpc::PortStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vnarpc::PortStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::vnarpc::PortsPair* Arena::CreateMaybeMessage< ::vnarpc::PortsPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vnarpc::PortsPair >(arena);
}
template<> PROTOBUF_NOINLINE ::vnarpc::PortCount* Arena::CreateMaybeMessage< ::vnarpc::PortCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vnarpc::PortCount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
